{"version":3,"sources":["components/Connect.js","components/QuoteForm.js","components/QuoteSection.js","serviceWorker.js","index.js","App.js"],"names":["Connect","useState","currentAccount","setCurrentAccount","useEffect","a","async","window","ethereum","console","log","request","method","accounts","length","account","checkIfWalletIsConnected","className","onClick","alert","QuoteForm","formInput","useRef","form","quote","setQuote","contractABI","abi","onSubmit","e","preventDefault","provider","ethers","providers","Web3Provider","signer","getSigner","quotePortalContract","Contract","process","writeQuote","gasLimit","quoteTxn","wait","ref","type","name","id","placeholder","onKeyPressCapture","which","autoComplete","onChange","target","value","QuoteSection","allQuotes","setAllQuotes","getAllQuotes","quotes","quotesCleaned","forEach","push","_","uniqueId","address","waver","timestamp","Date","message","on","from","prevState","onLoad","map","key","Boolean","location","hostname","match","ReactDOM","render","role","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b93d820e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport '../App.css';\n\n\nexport default function Connect() {\n\n  const [currentAccount, setCurrentAccount] = useState(\"\")\n  const checkIfWalletIsConnected = async () => {\n    /* \n    * First make sure we have access to window.ethereum\n     */\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      /*\n      * Check if we're authorized to access the user's wallet\n      */\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n      if (accounts.length !== 0) {\n        const account = accounts[0]\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n  /**\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask\");\n        return;\n      } else {\n        const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n        console.log(\"Connected\", accounts[0])\n        setCurrentAccount(accounts[0]);\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /* This runs our function when the page loads\n*/\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n  return (\n    <div className=\"container\">\n        {!currentAccount && (\n            <div>\n            <p> Connect your wallet </p>\n            <button className=\"waveButton\" onClick={connectWallet}>\n                   Connect Wallet\n            </button>\n            </div>\n        )}\n    </div>\n  )\n}","import React, { useState,useRef} from \"react\";\nimport { ethers } from \"ethers\";\nimport abi from '../utils/QuotePortal.json';\nimport '../App.css';\n\n\nexport default function QuoteForm() {\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n  const formInput = useRef(null);\n  const form = useRef(null);\n  const [quote,setQuote] = useState('');\n\n  // create a variable here that refernces the abi content!\n  const contractABI = abi.abi;\n  const handleQuoteChange = (e) => {\n      setQuote(e.target.value)\n  }\n\n  const enableNewline = (e) => {\n    if (e.which === 13){\n      e.preventDefault(); \n     }\n  }\n\n  /*\n  * A function to get post on the block chain\n  */\n  const writeQuotes = async (e) => {\n    e.preventDefault()\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const quotePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n  \n        const quoteTxn = await quotePortalContract.writeQuote(quote, {gasLimit: 300000});\n        console.log(\"Mining ...\", quoteTxn);\n\n        await quoteTxn.wait();\n        console.log(\"Mined ---\", quoteTxn);\n        \n\n        // count = await quotePortalContract.getTotalQuotes();\n      } else {\n        console.log(\"Ethereum object doesn't exit!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  return (\n    <div className='container'>\n      <form className=\"quote__form\" onSubmit={writeQuotes} ref={form}>\n        <div className=\"form__field\">\n          <input type=\"textarea\" name=\"quote\" id='form__input' placeholder=\"Send a quote...\" ref={formInput} onKeyPressCapture={enableNewline}  autoComplete=\"off\" onChange={handleQuoteChange}/>\n        </div>\n        <div className=\"progress-button\">\n          <button className=\"waveButton\">Submit</button>\n        </div>\n      </form>\n    </div>\n  )\n}","import React, {  useState, useEffect} from \"react\";\nimport '../App.css';\nimport { ethers } from \"ethers\";\nimport abi from '../utils/QuotePortal.json';\nimport _ from 'lodash';\n\n\n\nexport default function QuoteSection() {\n  const [allQuotes, setAllQuotes] = useState([])\n    // create a variable here that holds the contract address after you deploy\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n\n  // create a variable here that refernces the abi content!\n  const contractABI = abi.abi;\n\n  useEffect(() =>{\n    getAllQuotes();\n  },);\n\n\n\n  const getAllQuotes = async () => {\n    try {\n      const { ethereum } = window;\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const quotePortalContract = new ethers.Contract(contractAddress, contractABI,signer)\n      /**\n       * Call the getAllQuotes method from yout Smart Contract \n       */\n      const quotes = await quotePortalContract.getAllQuotes();\n\n      /*\n      *We need only address,timestamp, and message in our UI so let's pick those out\n       */\n\n              // breaking the code because i was putting the wrong address\n        // let count = await quotePortalContract.getTotalQuotes();\n        // console.log(\" Retrieved total quote count ...  \", count.toNumber());\n\n      let quotesCleaned = [];\n      quotes.forEach(quote => {\n        quotesCleaned.push({\n          id: _.uniqueId(),\n          address: quote.waver,\n          timestamp: new Date(quote.timestamp * 1000),\n          message: quote.message\n        });\n      });\n\n      /*\n      * Store our data in React State\n       */\n\n      setAllQuotes(quotesCleaned);\n\n      /*\n      * listen in for emitter events!\n       */\n      quotePortalContract.on(\"NewQuote\", (from, timestamp, message)=>{\n        console.log(\"NewMessage\", from, timestamp, message);\n\n        setAllQuotes( prevState => [...prevState,{\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message\n        }]);\n      });  \n\n    } else {\n      console.log(\"Ethereum object doesn't exist!\")\n    } \n    }\n    catch (error){\n      console.log(error);   \n    }\n  }\n\n  return (\n    <div className='container' onLoad={getAllQuotes}>\n      <div>\n        {/* <button className=\"waveButton left\" onClick={getAllQuotes}>\n              Read Quotes\n        </button> */}\n        <div className='allquotes' >\n            {allQuotes.map((quote)=> {\n              return( \n                <div className='quotes' key={quote.id}>\n                  <div> {quote.message}</div>\n                 <div>  written by: {quote.address}</div>\n                </div>\n              )\n            }\n            )}\n        </div>\n      </div>\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport './App.css';\nimport Connect from  './components/Connect';\nimport QuoteForm from './components/QuoteForm';\nimport QuoteSection from './components/QuoteSection';\n\n\nexport default function App() {\n\n  return (\n    <div className=\"mainContainer\">\n      <div className='container'>\n        <div className=\"header\">\n            <span role=\"img\">👋 </span>   Hey there, send a quote and probably win a fake ethereum\n        </div>\n        <div className=\"social-link\">\n        lets connect on socials:\n        <a href=\"http://www.twitter.com/__tbello\"> Twitter</a>\n        <a href=\"http://www.github.com/t-bello7\">Github</a>\n        <a href=\"https://www.linkedin.com/in/tbello7\">Linkedin</a>\n      </div>\n      </div>\n        <Connect />\n        <QuoteForm />\n        <QuoteSection />  \n   \n    </div>\n  );\n  }"],"sourceRoot":""}